%Процедуры для обхода словарей, структур и строк

%[{array|string|dict}source, proc]
/forallpairs {
	exch
	
	%[proc, source]
	dup type (dicttype) eq
	{
		%[proc, source]
		dup
		{
			%[proc, source, value, key]
			exch
			3 index exec
		} forall
	}
	{
		%[proc, source]
		0 1 
		2 index length 1 sub
		{
			%[proc, source, i]
			2 copy get
			%[proc, source, i, value]
			exch
			%[proc, source, value, i]
			3 index exec
		} for
	}
	ifelse
	pop
	pop
} def


%[{array|string|dict}source, proc, {array|string|dict}result]
/mappairs {
	3 -1 roll
	%[proc, result, source]
		
	%[source]
	{
		%[proc, result, thisproc, source, value, key]
		5 index 
		exec %proc
		%[proc, result, thisproc, source, newvalue, newkey]
		dup null eq 
		{
			pop pop
		}
		{
			4 index 
			3 1 roll
			exch
			put
		}
		ifelse
	}
	forallpairs
	%[proc, result]
	exch pop
} def
%[result]

/==dict {
	(<<) ==
	{
		exch == ==
	}forall
	(>>) ==
} def

%Берёт значение из словаря, если оно там есть, и кладёт в стек 0, если нет
%[dict, key]
/safeGet {
	2 copy known not
	{pop pop 0}
	{get}
	ifelse
} def

%преобразует число в имя, используется для словарей с числовыми ключами
/intcvn {
	40 string cvs cvn
} def

/anycvn {
	dup type
	<<
		/stringtype {cvn}
		/nametype {}
		/integertype {intcvn}
		/realtype {intcvn}
	>>
	exch get exec
} def


%[{array|string|dict}source]
/invert {
	{
		exch anycvn
	}
	0 dict
	mappairs
} def
%[dict]

/dict-keys {
	0 dict begin
		/source exch def
		/i 0 def
		source
		{
			%[value, key]
			exch pop
			i
			/i i 1 add def
		}
		source length array
		mappairs
	end
} def

/dict-values {
	0 dict begin
		/source exch def
		/i 0 def
		source
		{
			%[value, key]
			pop
			i
			/i i 1 add def
		}
		source length array
		mappairs
	end
} def

%Находит уникальные значения в массиве или строке
%[{array|string}source]
/unique {
	{
		%[value, key]
		pop dup anycvn
		%[value, key]
	}
	0 dict
	mappairs
	dict-values
} def
%[{array}]

%[arr]
/shaker-sort {
	0 dict begin 
		/arr exch def
		/right arr length 2 sub def
		/left 0 def
		
		%Сортирует пару чисел по переданному индексу
		%[i]
		/sort-pair{
			/i exch def
			/j i 1 add def

			arr i get
			arr j get
			2 copy
			ge
			{
				%[arr[i], att[j]]
				arr i 3 -1 roll put
				arr j 3 -1 roll put
			}
			{
				pop pop
			}
			ifelse
		} def
		
		{
			left 1 right
			{sort-pair}
			for
			/right right 1 sub def
			
			right -1 left
			{sort-pair}
			for
			/left left 1 add def
			
			%Постусловие
			left right 1 add le not
			{exit}
			if
		}loop
		arr
	end
} def
%[arr]

%Принимает массив ключей и словарь, возвращает массив значений словаря
%[array, dict]
/map-with-dict {
	0 dict begin
		/dic exch def
		/arr exch def
		/result arr length array def
		arr
		{
			%[value, key]
			exch anycvn
			dic exch get
			exch
		}
		result
		mappairs
	end
} def

%создаёт новый словарь, в который последовательно копируются сначала dict1, а потом dict2
%[dict2, dict1]
/dict-extend {
	<<>> copy copy
} def

%@param {array<dict>} arr - массив словарей, которые нужно сложить
%[arr]
/many-dict-copy {
	0 dict begin
		/arr exch def
		/result <<>> def
		
		arr
		{
			result copy pop
		}
		forall
		result
	end
} def