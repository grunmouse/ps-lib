%% Набор процедур, рисующих характерные, встречающиеся в шрифтах элементы
	%% @private
	%% Процедура подготовик данных для рисования дуги квадранта
	%[r, sgndx, sgndy]
	/preparct {
		2 index mul
		%[r, sgndx, dy]
		exch
		2 index mul
		%[r, dy, dx]
		currentpoint
		%[r, dy, dx, x0, y0]
		4 1 roll
		%[r, y0, dy, dx, x0]
		add
		%[r, y0, dy, xn]
		3 1 roll
		%[r, xn, y0, dy]
		add
		%[r, x2, y2]
	} def
	
	%Рисует дугу квадранта из точки currentpoint в точку с координатами currentpoint + r{sgndx, sgndy}, начиная по вертикали
	%[r, sgndx, sgndy]
	/arcty {
		preparct
		%[r, x2, y2]
		currentpoint
		%[r, x2, y2, x0, y0]
		%x1 = x0, y1 = y2
		pop
		%[r, x2, y2, x0]
		3 1 roll
		%[r, x0, x2, y2]
		%[r, x0, x2, y2, y2]
		dup
		3 1 roll
		%[r, x0, y2, x2, y2]
		5 -1 roll
		%[x1, y1, x2, y2, r]
		%5 copy (r) == == (2yx) == == == (1yx) == == ==
		arct
	} def
	
	%Рисует дугу квадранта из точки currentpoint в точку с координатами currentpoint + r{sgndx, sgndy}, начиная по горизонтали
	%[r, sgndx, sgndy]
	/arctx {
		preparct
		%3 copy (pre 2yx) == == == (pre r) == ==
		%[r, x2, y2]
		currentpoint
		%x1 = x2, y1 = y0
		%[r, x2, y2, x0, y0]
		3 1 roll
		%[r, x2, y0, y2, x0]
		pop
		%[r, x2, y0, y2]
		2 index
		%[r, x2, y0, y2, x2]
		exch
		%[r, x2, y0, x2, y2]
		5 -1 roll
		%[x1, y1, x2, y2, r]
		%5 copy (r) == == (2) == == == (1) == == ==
		arct
	} def
	
	%% Рисует крюк, состоящий из горизонтальной линии и дуги квадратна
	%% Конец крюка будет располагаться на абсциссе x и ординате r*sgny
	%[x, r, sgny]
	/xlinearc {
		%%x0 = curx + sign(x - curx)*(abs(x - curx) - r)
		%x0 = x - sign(x - curx)*r
		%y0 = cury
		%x1 = x; y1 = cury
		%x2 = x; y2 = cury + sgny*r
		1 index
		%2 copy (x) == == ==
		mul				%[x, r, r*sgny]
		
		2 index
		dup
		currentpoint	%[x, r, r*sgny, x, x, curx, cury]
		5 1 roll		%[x, r, cury, r*sgny, x, x, curx]
		sub				%[x, r, cury, r*sgny, x, x - curx]
		sign				%[x, r, cury, r*sgny, x, sign(x - curx)]
		4 index			%[x, r, cury, r*sgny, x, sign(x - curx), r]
		mul				%[x, r, cury, r*sgny, x, sign(x - curx)*r]
		sub				%[x, r, cury, r*sgny, x0]
		2 index			%[x, r, cury, r*sgny, x0, cury]
		lineto			%[x, r, cury, r*sgny]
		
		1 index			%[x, r, cury, r*sgny, cury]
		add				%[x, r, cury, y2]
		3 index			%[x, r, cury, y2, x]
		exch			%[x, r, cury, x, y2]
		4 -1 roll		%[x, cury, x, y2, r]
		%[x1, y1, x2, y2, r]
		%5 copy (r) == == (2) == == == (1) == == ==
		arct
	} def
	
	%% Рисует крюк, состоящий из вертикальной линии и дуги квадратна
	%% Конец крюка будет располагаться по координатам {r*sgnx, y}
	%[y, r, sgnx]
	/ylinearc {
		%y0 = y - sign(y - cury)*r
		%x0 = curx
		%y1 = y; x1 = curx
		%y2 = y; x2 = curx + sgnx*r
		1 index
		%2 copy (y) == == ==
		mul				%[y, r, r*sgnx]
		
		2 index
		dup
		currentpoint	%[y, r, r*sgnx, y, y, curx, cury]
		exch			%[y, r, r*sgnx, y, y, cury, curx]
		7 1 roll		%[curx, y, r, r*sgnx, y, y, cury]
		sub				%[curx, y, r, r*sgnx, y, y - curx]
		sign				%[curx, y, r, r*sgnx, y, sign(y - cury)]
		3 index			%[curx, y, r, r*sgnx, y, sign(y - cury), r]
		mul				%[curx, y, r, r*sgnx, y, sign(y - cury)*r]
		sub				%[curx, y, r, r*sgnx, y0]
		4 index exch	%[curx, y, r, r*sgnx, curx, y0]
		%[curx, y0]
		%[x0, y0]
		lineto			%[curx, y, r, r*sgnx]
		%currentpoint == ==
		3 index			%[curx, y, r, r*sgnx, curx]
		add				%[curx, y, r, x2]
		2 index			%[curx, y, r, x2, y]
		3 -1 roll		%[curx, y, x2, y, r]
		%[curx, y, x2, y, r]
		%[x1, y1, x2, y2, r]
		%5 copy (r) == == (2) == == == (1) == == ==
		arct
	} def

	/xlinearcup {
		1 xlinearc
	} def
	/xlinearcdown {
		-1 xlinearc
	} def
	/ylinearcleft {
		-1 ylinearc
	} def
	
	/ylinearcright {
		1 ylinearc
	} def
	

	
	%Определяет и делает текущим словарь, содержащий координаты точек прямоугольника ABCD
	%где A = currentpoint, C = cx, cy,
	%B = ax, cy; D = cx, ay
	%AB - вертикаль, AD - горизонталь
	%[cx, cy]
	/beginABCD {
		0 dict begin
			setABCD
	} def
	
	/setABCD {
		/C 2edef
		/A currentpoint 2def
		
		A C 2swap-y
		/D 2edef
		/B 2edef
	} def
	
	%Определяет в текущем словаре ABCD точки
	%[x, y]
	%BNC
	%MQO
	%APD
	/setMNOPQ {
		/Q 2edef
		A Q 2swap-y
		/P 2edef
		/M 2edef
		Q C 2swap-y
		/O 2edef
		/N 2edef
	} def
	
	%рисует две линии буквой X, причём одна из них - из текущей точки в переданную
	%[x2, y2]
	/gliphX {
		beginABCD
			C lineto
			B moveto
			D lineto
			C moveto
		end
	} def
	
	%рисует три линии буквой Z таким образом, чтобы придти из текущей точки в переданную
	%[x2, y2]
	/gliphZ {
		beginABCD
			D lineto
			B lineto
			C lineto
		end
	} def
	
	%рисует три линии буквой N таким образом, чтобы придти из текущей точки в переданную
	%[x2, y2]
	/gliphN {
		beginABCD
			B lineto
			D lineto
			C lineto
		end
	} def
	
	%[x2, y2, middle]
	/gliphH {
		0 dict begin
			3 1 roll
			setABCD
			0 exch setMNOPQ
			
			A moveto B lineto
			M moveto O lineto
			D moveto C lineto
		end
	} def
	
	%[r, x2, y2]
	%Рисует линию A-D-C-B скругляя углы D и C радиусом r
	/gliphC {
		beginABCD
			/r exch def
			r [D C B] many-arct
			lineto
			% D C r arct
			% C B r arct
			% B lineto
		end
	} def

	%[r, x2, y2]
	%Рисует линию A-B-C-D скругляя углы D и C радиусом r
	/gliphU {
		beginABCD
			/r exch def
			B C r arct
			C D r arct
			D lineto
		end
	} def

	%Рисует прямоугольник со скруглёнными углами, начиная и заканчивая в середине стороны AB
	%[r, x2, y2]
	/gliphO {
		beginABCD
			/r exch def
			/M B A 2add 2 2div 2def
			M moveto
			r [B C D A M] many-arct
			lineto
		end
	} def
	
	/arcYX {
		0 dict begin
			/r exch def
			setABCD
			B C r arct
			C lineto
		end
	} def
	
	/arcXY {
		0 dict begin
			/r exch def
			setABCD
			D C r arct
			C lineto
		end
	} def
	
	%Рисует скруглённую ломаную. После завершения работы в стеке xn, yn
	%[r, [x1, y1, ... xn, yn]]
	/many-arct {
		0 dict begin
			/points exch def
			/r exch def
			/n points length 2 div ceiling cvi def
			points aload pop
			n -1 2
			{
				/i exch def
				i -1 2roll %крутим первую точку наружу
				i 1 sub 2index %дублируем на вершину стека вторую точку (теперь она первая)
				r arct % рисуем, снимаются обе точки, значит массив стал на одну точку короче
			}
			for
		end
	} def
	%[xn, yn]